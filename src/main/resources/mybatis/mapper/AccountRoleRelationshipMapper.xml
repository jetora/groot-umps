<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.flow.dao.mapper.AccountRoleRelationshipMapper" >
  <resultMap id="BaseResultMap" type="org.flow.pojo.AccountRoleRelationship" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="account_id" property="accountId" jdbcType="BIGINT" />
    <result column="role_id" property="roleId" jdbcType="BIGINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from account_role_relationship
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="org.flow.pojo.AccountRoleRelationship" >
    insert into account_role_relationship (id, account_id, role_id, 
      create_time, update_time)
    values (#{id,jdbcType=BIGINT}, #{accountId,jdbcType=BIGINT}, #{roleId,jdbcType=BIGINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="org.flow.pojo.AccountRoleRelationship" >
    update account_role_relationship
    set account_id = #{accountId,jdbcType=BIGINT},
      role_id = #{roleId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, account_id, role_id, create_time, update_time
    from account_role_relationship
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByAccountId" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, account_id, role_id, create_time, update_time
    from account_role_relationship
    where account_id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByAccountIds" resultType="java.lang.Long" >
    select distinct role_id
    from account_role_relationship
    where 1=1 and account_id in
      <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
          #{item}
      </foreach>
  </select>
  <select id="selectByRoleId" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, account_id, role_id, create_time, update_time
    from account_role_relationship
    where role_id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, account_id, role_id, create_time, update_time
    from account_role_relationship
  </select>
  <select id="selectRelAll" parameterType="Map" resultType="org.flow.vo.AccRole" >
    SELECT
    a.id,
    a.account_id as accountId,
    b.username as username,
    a.role_id as roleId,
    c.name as rolename,
    a.create_time as createTime,
    a.update_time as updateTime
FROM
    (SELECT
        t1.id, account_id, role_id, create_time, update_time
    FROM
        account_role_relationship t1
    JOIN (SELECT
        id
    FROM
        account_role_relationship
    WHERE
        1 = 1 order by id asc) t2
    WHERE
        t1.id = t2.id
       order by id asc
      ) a,
    account b,
    role c
WHERE
    a.account_id = b.id AND a.role_id = c.id
  </select>
  <select id="selectRelPager" parameterType="Map" resultType="org.flow.vo.AccRole" >
    SELECT
    a.id,
    a.account_id as accountId,
    b.username as username,
    a.role_id as roleId,
    c.name as rolename,
    a.create_time as createTime,
    a.update_time as updateTime
FROM
    (SELECT
        t1.id, account_id, role_id, create_time, update_time
    FROM
        account_role_relationship t1
    JOIN (SELECT
        id
    FROM
        account_role_relationship
    WHERE
        1 = 1
      <if test="params.accountid !=null and params.accountid!=''">
          and account_id=#{params.accountid}
      </if>
      <if test="params.roleid !=null and params.roleid!=''">
          and role_id=#{params.roleid}
      </if>
      <if test="params.ordername!=null and params.ordername!=''">
          order by ${params.ordername}
      </if>
      ${params.order} LIMIT ${params.offset},${params.pageSize}
      ) t2
    WHERE
        t1.id = t2.id
        <if test="params.accountid !=null and params.accountid!=''">
            and account_id=#{params.accountid}
        </if>
        <if test="params.roleid !=null and params.roleid!=''">
           and role_id=#{params.roleid}
        </if>
        <if test="params.ordername!=null and params.ordername!=''">
            order by ${params.ordername}
        </if>
        ${params.order} LIMIT ${params.pageSize}
      ) a,
    account b,
    role c
WHERE
    a.account_id = b.id AND a.role_id = c.id
      <if test="params.username !=null and params.username!=''">
          and b.username=#{params.username}
      </if>
      <if test="params.rolename !=null and params.rolename!=''">
          and c.name=#{params.rolename}
      </if>
  </select>
    <select id="selectByWhereCount" resultType="java.lang.Integer" >
        SELECT
        count(*)
        FROM
        (SELECT
        t1.id, account_id, role_id, create_time, update_time
        FROM
        account_role_relationship t1
        JOIN (SELECT
        id
        FROM
        account_role_relationship
        WHERE
        1 = 1
        <if test="params.accountid !=null and params.accountid!=''">
            and account_id=#{params.accountid}
        </if>
        <if test="params.roleid !=null and params.roleid!=''">
            and role_id=#{params.roleid}
        </if>
        <if test="params.ordername!=null and params.ordername!=''">
            order by ${params.ordername}
        </if>
        ${params.order}
        ) t2
        WHERE
        t1.id = t2.id
        <if test="params.accountid !=null and params.accountid!=''">
            and account_id=#{params.accountid}
        </if>
        <if test="params.roleid !=null and params.roleid!=''">
            and role_id=#{params.roleid}
        </if>
        <if test="params.ordername!=null and params.ordername!=''">
            order by ${params.ordername}
        </if>
        ${params.order}
        ) a,
        account b,
        role c
        WHERE
        a.account_id = b.id AND a.role_id = c.id
        <if test="params.username !=null and params.username!=''">
            and b.username=#{params.username}
        </if>
        <if test="params.rolename !=null and params.rolename!=''">
            and c.name=#{params.rolename}
        </if>
    </select>
</mapper>